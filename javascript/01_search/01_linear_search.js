//----------------------------------------------------------
// 這個演算法是一個線性搜尋（Linear Search）的例子。線性搜尋是最基本的搜尋演算法之一，
// 適用於在未排序的數組中查找特定元素。它的工作原理非常直接：
//
// 這個演算法的主要特點是它的簡單性和通用性，但相對的，它的效率並不高，
// 特別是在處理大型數組時。線性搜尋的時間複雜度是 O(n)，其中 n 是數組的長度。
// 这意味着在最糟糕的情况下，可能需要檢查數組中的每一個元素才能找到目標值或確定目標值不存在。

let numbers = [
  33,
  99,
  97,
  28,
  87,
  72,
  48,
  72,
  18,
  89,
  18,
  45,
  85,
  13,
  70,
  80,
  10,
  88,
  92,
  65,
  23,
  73,
  88,
  55,
  1,
  79,
  95,
  69,
  30,
  31,
  88,
  13,
  32,
  86,
  15,
  51,
  69,
  29,
  11,
  26,
  62,
  0,
  45,
  32,
  21,
  4,
  73,
  10,
  88,
  23,
  93,
  34,
  91,
  68,
  8,
  36,
  66,
  19,
  45,
  12,
  15,
  29,
  68,
  59,
  53,
  76,
  42,
  81,
  27,
  30,
  69,
  15,
  18,
  0,
  12,
  2,
  28,
  79,
  49,
  15,
  70,
  4,
  34,
  48,
  40,
  28,
  55,
  73,
  18,
  37,
  10,
  65,
  95,
  11,
  49,
  7,
  22,
  24,
  19,
  33,
];

function linearSearch(arr, n) {
  let step = 0;
  for (let i = 0; i < arr.length; i++) {
    step++;
    if (arr[i] === n) {
      console.log("Found number " + n + " at index " + i);
      console.log("Found it after " + step + " steps.");
      return i;
    }
  }
  console.log("Cannot find " + n);
  return -1;
}



linearSearch(numbers, 19);
